<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Planter - Plantastic</title>

  <!-- Police d’écriture -->
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&display=swap" rel="stylesheet">

  <!-- Three.js et OBJLoader -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r152/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/examples/js/loaders/OBJLoader.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/examples/js/controls/OrbitControls.js"></script>

  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
      color: #333;
    }

    header {
      background: url("images/fond-plantes.webp") no-repeat center center;
      background-size: cover;
      color: white;
      padding: 50px 20px;
      text-align: center;
    }

    header h1 {
      font-family: 'Playfair Display', serif;
      font-weight: 700;
      font-size: 50px;
    }

    nav {
      background: #008000;
      padding: 10px;
      text-align: center;
    }

    nav a {
      color: white;
      margin: 0 15px;
      text-decoration: none;
      font-weight: bold;
      transition: color 0.3s;
    }

    nav a:hover {
      color: black;
    }

    main {
      padding: 40px 20px;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      gap: 20px;
    }

    #canvas-container {
      width: 80%;
      max-width: 800px;
      height: 500px;
      border: 1px solid #ccc;
      background-color: #f0f0f0;
    }

    footer {
      background: #582900;
      color: white;
      text-align: center;
      padding: 10px;
      position: fixed;
      bottom: 0;
      width: 100%;
    }
  </style>
</head>
<body>

  <!-- En-tête -->
  <header>
    <h1>Plantastic</h1>
    <p>Amélie CUESTA and Tom DE SAINT JORE</p>
  </header>

  <!-- Navigation -->
  <nav>
    <a href="index.html">Accueil</a>
    <a href="a_propos.html">À propos</a>
    <a href="contact.html">Contact</a>
  </nav>

  <!-- Contenu principal -->
  <main>
    <h2>Visualisation 3D</h2>
    <p>Voici notre pot de plante en 3D. Vous pouvez le visualiser et faire tourner le modèle.</p>

    <!-- Conteneur pour le modèle 3D -->
    <div id="canvas-container"></div>
  </main>

  <!-- Footer -->
  <footer>
    <p>&copy; 2025 E4 project</p>
  </footer>

  <!-- Script Three.js pour OBJ -->
  <script>
  window.addEventListener('load', () => {
    const container = document.getElementById('canvas-container');

    // 1️⃣ Scène
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xf0f0f0);

    // 2️⃣ Caméra
    const camera = new THREE.PerspectiveCamera(
      75,
      container.offsetWidth / container.offsetHeight,
      0.1,
      1000
    );
    camera.position.z = 5;

    // 3️⃣ Renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(container.offsetWidth, container.offsetHeight);
    container.appendChild(renderer.domElement);

    // 4️⃣ Contrôles
    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;

    // 5️⃣ Lumières
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(5, 10, 7.5);
    scene.add(directionalLight);

    // 6️⃣ Chargement du modèle OBJ
    const loader = new THREE.OBJLoader();
    loader.load(
      'test_pots.obj', // Assure-toi que le fichier OBJ est dans le même dossier que plantes.html
      function (object) {
        // Centrer et mettre à l’échelle automatiquement
        const box = new THREE.Box3().setFromObject(object);
        const center = box.getCenter(new THREE.Vector3());
        object.position.sub(center);

        const size = box.getSize(new THREE.Vector3());
        const maxDim = Math.max(size.x, size.y, size.z);
        object.scale.setScalar(2 / maxDim);

        scene.add(object);

        // Ajuster la caméra pour voir l’objet
        camera.position.z = maxDim * 2;
      },
      function (xhr) {
        console.log((xhr.loaded / xhr.total * 100) + '% chargé');
      },
      function (error) {
        console.error('Erreur lors du chargement du modèle :', error);

        // Si échec, afficher un cube de test
        const geometry = new THREE.BoxGeometry();
        const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
        const cube = new THREE.Mesh(geometry, material);
        scene.add(cube);
      }
    );

    // 7️⃣ Animation
    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }

    animate();

    // 8️⃣ Resize
    window.addEventListener('resize', () => {
      camera.aspect = container.offsetWidth / container.offsetHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.offsetWidth, container.offsetHeight);
    });
  });
  </script>

</body>
</html>
